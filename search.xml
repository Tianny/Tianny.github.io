<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java入门-集合</title>
      <link href="/2020/04/02/java/ji-chu/ji-he/"/>
      <url>/2020/04/02/java/ji-chu/ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h2><p>List 集合中元素有序、可重复，集合中每个元素都有其对应的索引顺序。</p><blockquote><p>List 判断两个对象相等，只要通过 equals 方法比较返回 true 即可。</p></blockquote><p>看个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当试图删除一个 A 对象时，List 会调用 A 对象的 equals 方法依次与集合元素进行比较。如果 equals 方法以某个集合元素作为参数时返回 true，List 将会删除该元素。这里 A 重写了 equals 方法，总是返回 true，所以每次都会从 List 集合中删除一个元素。</p><h3 id="ArrayList-类"><a href="#ArrayList-类" class="headerlink" title="ArrayList 类"></a>ArrayList 类</h3><p>ArrayList 类是基于数组实现的 List 类，完全支持前面介绍的 List 接口的全部功能。</p><p>ArrayList 封装了一个动态的、允许再分配的 Object[] 数组。</p><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><h3 id="HashSet-类"><a href="#HashSet-类" class="headerlink" title="HashSet 类"></a>HashSet 类</h3><ul><li><p>元素没有顺序，集合元素的值可以是 null</p></li><li><p>HashSet 不是同步的，假设有多个线程同时修改了 HashSet 集合时，必须通过代码来保证其同步</p></li></ul><blockquote><p>HashSet 判断元素相等的标准是两个对象通过 equals() 比较相等，同时两个对象的 hashCode()返回值也相等。</p></blockquote><blockquote><p>hashCode 和 equals 符合这样一个约定:equals 返回 true， hashCode 必须相等。很多 Java 类库中的代码都是按照这种约定使用这两个方法的，比如 HashSet。</p></blockquote><p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来获得该对象的 hashCode 值，然后根据该 hashCode 值决定该对象在 HashSet 中的存储位置。</p><p>HashSet 中每个能存储元素的槽位称为桶(bucket)。如果多个元素的 hashCode 值相同，但它们通过 equals 方法比较返回 false，就需要在一个桶里放多个元素，这会导致性能下降。所以，建议在需要把某个类的对象保存到 HashSet 集合时，重写该类的 equals 和 hashCode 方法，尽量保证两个对象通过 equals 方法比较返回 true 时，他们的 hashCode 方法返回值也相等。</p><p>当把可变对象添加到 HashSet 中后，需要特别小心，尽量不要去修改可变对象中参与计算 hashCode() 、equals() 方法的实例变量，否则会导致 HashSet 无法正确访问这些集合元素。</p><p>看个例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">R</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"R[count:"</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> R<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            R r <span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">==</span> r<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator it <span class="token operator">=</span> hs<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R first <span class="token operator">=</span> <span class="token punctuation">(</span>R<span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        first<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>        hs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hs 是否包含 count 为 -3 的 R 对象"</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hs 是否包含 count 为 -2 的 R 对象"</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*[R[count:-2], R[count:-3], R[count:5], R[count:9]][R[count:-3], R[count:-3], R[count:5], R[count:9]][R[count:-3], R[count:5], R[count:9]]hs 是否包含 count 为 -3 的 R 对象falsehs 是否包含 count 为 -2 的 R 对象false*/</span></code></pre><h3 id="LinkedHashSet-类"><a href="#LinkedHashSet-类" class="headerlink" title="LinkedHashSet 类"></a>LinkedHashSet 类</h3><p>LinkedHashSet 是 HashSet 的子类，同样根据 hashCode 值来决定元素的存储位置。但是使用链表维护元素的次序，使得当遍历 LinkedHashSet 集合里的元素时，LinkedHashSet 会按元素的添加顺序访问集合里的元素。</p><p>LinkedHashSet 需要维护元素的插入顺序，因此性能略低于 HashSet，但在迭代访问 Set 里的全部元素时会有很好的性能，因为它以链表维护内部的顺序。</p><h3 id="TreeSet-类"><a href="#TreeSet-类" class="headerlink" title="TreeSet 类"></a>TreeSet 类</h3><p>TreeSet 是 SortedSet 接口的实现类，顾名思义这是一种排序的 Set 集合。</p><p>TreeSet 底层使用 TreeMap 实现，采用红黑树的数据结构来存储集合元素。TreeSet 支持两种排序方法：自然排序和定制排序。默认情况下，使用自然排序。</p><h4 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h4><p>Java 提供了 Comparable 接口，接口定义了一个 compareTo(Object obj) 方法。实现该接口的类必须实现该抽象方法。</p><p>compareTo(Object obj) 比较规则如下：</p><ul><li>obj1.compareTo(obj2) 返回值为 0，表明相等</li><li>obj1.compareTo(obj2) 返回值大于 0，表明 obj1 &gt; obj2</li><li>obj1.compareTo(obj2) 返回值小于 0，表明 obj1 &lt; obj2</li></ul><p>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素大小关系，再将集合元素按升序排序，这就是自然排序。所以自然排序中的元素对象都必须实现了 Comparable 接口。</p><blockquote><p>如果两个对象通过 compareTo(Object obj) 比较相等， 即返回值为0，TreeSet 认为它们相等，那么新对象将无法添加到 TreeSet 集合中。</p></blockquote><blockquote><p>如果希望 TreeSet 能正常工作，TreeSet 只能添加同一种类型的对象。</p></blockquote><h4 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h4><p>如果需要实现定制排序，需要在创建 TreeSet 集合对象时，提供一个 Comparator 对象与该 TreeSet 集合关联。Comparator 是一个函数式接口，可以使用 Lambda 表达式代替。</p><p>通过定制排序方式时，依然不可以向 TreeSet 中添加不同类型的对象，否则引发 ClassCastException 异常。此时集合判断两个元素相等的标准是：通过 Comparator 比较两个元素返回了 0， 这样 TreeSet 也不会把第二个元素添加到集合中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeSettest4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeSet ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            M m1 <span class="token operator">=</span> <span class="token punctuation">(</span>M<span class="token punctuation">)</span> o1<span class="token punctuation">;</span>            M m2 <span class="token operator">=</span> <span class="token punctuation">(</span>M<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>            <span class="token keyword">return</span> m1<span class="token punctuation">.</span>age <span class="token operator">></span> m2<span class="token punctuation">.</span>age <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> m1<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> m2<span class="token punctuation">.</span>age <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面使用目标类型为 Comparator 的 Lambda 表达式，它负责 ts 集合的排序。所有 M 类无需实现 Comparable 接口，而是由 TreeSet 关联的 Lambda 表达式负责元素的排序。</p><p>在实现 compareTo 方法时，强烈推荐与 equals 结果一致，否则可能会出现一些奇怪的错误。因为有些类是根据 equals 来判断重复性，有些是利用自然排序 x.compareTo(y) == 0 来判断。compareTo 是判断元素在排序中的位置是否相等，equals 是判断元素是否相等，既然一个决定排序位置，一个决定相等，所以我们非常有必要确保当排序位置相同时，其equals也应该相等。</p><h3 id="EnumSet-类"><a href="#EnumSet-类" class="headerlink" title="EnumSet 类"></a>EnumSet 类</h3><p>EnumSet 是专为枚举类设计的集合类，EnumSet 中的所有元素都必须是指定枚举类型的枚举类，该枚举类型在创建 EnumSet 时显式或隐式的的指定。</p><p>EnumSet 的集合元素是有序的，以枚举值在 Enum 类内的定义顺序来决定集合元素的顺序。EnumSet 集合不允许插入 null 元素。</p><p>EnumSet 内部以位向量的形式存储，这种存储形式紧凑高效，占用内存很小，运行效率很高。尤其是在进行批量操作时，比如调用 containsAll 和 retainAll 方法时。</p><h2 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h2><p>定义：Map 用于保存具有映射关系的数据，key 和 value 之间存在单向的一对一关系，key 不允许重复。</p><blockquote><p>Set 与 Map 之间关系非常密切，如果把 key-value 对中的 value 当成 key 的附庸，key 在哪里，value 就在哪里。这样就可以像对待 Set 一样对待 Map 了。</p><p>实际上，Map 提供了一个 Entry 内部类来封装 key-value 对，而计算 Entry 存储时则只考虑 Entry 封装的 key。从源码来看，Java 是先实现了 Map，然后通过包装一个所有 value 都为 null 的 Map 就实现了 Set 集合。</p></blockquote><h3 id="HashMap-实现类"><a href="#HashMap-实现类" class="headerlink" title="HashMap 实现类"></a>HashMap 实现类</h3><p>HashMap 中用作 key 的对象必须实现 hashCode() 方法和 equals() 方法。</p><blockquote><p>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法比较返回 true，两个 key 的 hashCode 值也相等。</p></blockquote><blockquote><p>HashMap 判断两个 value 相等的标准是：两个对象通过 equals() 方法返回 true 即可。</p></blockquote><p>与 HashSet 类似，当使用自定义类作为 HashMap 的 key 时，如果重写该类的 equals() 方法 和 hashCode() 方法，则应该保证两个方法的判断标准一致，即当两个 key 通过 equals() 方法比较返回 true 时，两个 key 的 hashCode() 方法返回值也应该相同。</p><p>与 HashSet 类似，尽量不要使用可变对象作为 HashMap 的 key，如果使用了，则尽量不要在程序中修改作为 key 的可变对象。</p><h3 id="LinkedHashMap-实现类"><a href="#LinkedHashMap-实现类" class="headerlink" title="LinkedHashMap 实现类"></a>LinkedHashMap 实现类</h3><p>LinkedHashMap 也使用双向链表来维护 key-value 对的次序（其实只需要考虑 key 的次序），该链表负责维护 Map 的迭代顺序，迭代顺序与 key-value 对的插入顺序保持一致。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedHashMap scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Chinses"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"English"</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scores<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Math"</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scores<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key <span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="TreeMap-实现类"><a href="#TreeMap-实现类" class="headerlink" title="TreeMap 实现类"></a>TreeMap 实现类</h3><p>TreeMap 是一个红黑树数据结构，每个 key-value 对即作为红黑树的一个节点。TreeMap 存储 key-value 对节点时，需要根据 key 对节点进行排序。TreeMap 可以保证所有的 key-value 对处于有序状态。</p><p>两种排序方式：</p><ul><li>自然排序：TreeMap 的所有 key 必须实现 Comparable 接口，而且所有的 key 应该是同一个类的对象，否则会抛出 ClassCastException 异常</li><li>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。采用定制排序时不要求 Map 的 key 实现 Comparable 接口</li></ul><blockquote><p>TreeMap 判断两个 key 相等的标准是：两个 key 通过 compareTo 方法返回 0。</p></blockquote><p>类似于 TreeSet，如果使用自定义类作为 TreeMap 的 key，为了让 TreeMap 良好的工作，则重写该类的 equals() 方法和 compareTo() 方法时应该保持一致的结果：两个 key 通过 equals 方法比较返回 true 时，它们通过 compareTo 方法比较应该返回 0。</p><p>在实现 compareTo 方法时，强烈推荐与 equals 结果一致，否则可能会出现一些奇怪的错误。因为有些类是根据 equals 来判断重复性，有些是利用自然排序 x.compareTo(y) == 0 来判断。compareTo 是判断元素在排序中的位置是否相等，equals 是判断元素是否相等，既然一个决定排序位置，一个决定相等，所以我们非常有必要确保当排序位置相同时，其equals也应该相等。</p><p>官方文档的说明：</p><blockquote><p>Virtually all Java core classes that implement Comparable have natural orderings that are consistent with equals.</p></blockquote><h3 id="EnumMap-实现类"><a href="#EnumMap-实现类" class="headerlink" title="EnumMap 实现类"></a>EnumMap 实现类</h3><p>EnumMap 的 key 必须是单个枚举类的枚举值。</p><p>EnumMap 具有以下特征：</p><ul><li><p>EnumMap 在内部以数组形式保存</p></li><li><p>EnumMap 根据 key 的自然顺序（即枚举值在枚举类中的定义顺序）来维护 key-value 对的顺序</p></li><li><p>EnumMap 不能使用 null 作为 key 值</p></li></ul><p>创建 EnumMap 时必须指定一个枚举类，从而将该 EnumMap 和指定枚举类相关联。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-异常</title>
      <link href="/2020/04/02/java/ji-chu/yi-chang/"/>
      <url>/2020/04/02/java/ji-chu/yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="异常层次"><a href="#异常层次" class="headerlink" title="异常层次"></a>异常层次</h2><p><img src="https://raw.githubusercontent.com/Tianny/Pic/master/img/WX20190411-222702%402x.png" alt></p><ul><li>Error：Java 运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。如果出现了这样的内部错误，除了通告给用户，并尽力使程序安全地终止之外，再也无能为力了。</li><li>Exception<ul><li>RuntimeException：由程序错误导致的异常</li><li>其他异常：程序本身没有问题，但由类似 IO 错误导致的异常</li></ul></li></ul><h2 id="Checked-异常-amp-Runtime-异常"><a href="#Checked-异常-amp-Runtime-异常" class="headerlink" title="Checked 异常 &amp; Runtime 异常"></a>Checked 异常 &amp; Runtime 异常</h2><p>Checked 异常：不是 RuntimeException 类及其子类的异常实例</p><p>Runtime 异常：所有 RuntimeException 类及其子类的异常实例</p><blockquote><p>Java 认为 Checked 异常都是可以被处理修复的异常，所以程序必须显示处理 Checked 异常，如果程序没有处理 Checked 异常，编译时会出错。Checked 异常体现了 Java 的设计理念，没有完善错误处理的代码根本不会被执行。</p></blockquote><p>对 Checked 异常处理方式：</p><ul><li><p>当前方法明确知道如何处理该异常，应该使用 try-catch 处理该异常</p></li><li><p>当前方法不知道如何处理该异常，应在定义该方法时声明抛出该异常</p></li></ul><p>对 Runtime 异常的处理方式：</p><ul><li>Runtime 异常无需显式声明抛出，如果程序需要捕获 Runtime 异常，也可以使用 try-catch 块</li></ul><h2 id="throws-声明抛出异常"><a href="#throws-声明抛出异常" class="headerlink" title="throws 声明抛出异常"></a>throws 声明抛出异常</h2><p>如果当前方法不知道如何处理这种类型的异常，该异常应该由上一级调用者处理，如果上一级调用者也不知道如何处理，再抛出直至交由 JVM 处理。</p><p>throws 声明抛出只能在方法声明中使用，可以声明抛出多个异常类。一旦使用 throws 语句声明抛出该异常，程序就无需使用 try-catch 来捕获异常了。</p><p>示例：下面程序声明不处理 IOException 异常，而是将该异常交由 JVM 处理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果某段代码中调用了一个带 throws 声明的方法，该方法声明抛出了 Checked 异常，则表明该方法希望它的调用者来处理该异常。那么调用者在调用该方法时，要么将其放入 try 块中并显示捕获该异常，要么放在另一个带 throws 声明抛出的方法中。</p><p>示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 因为 FileInputStream 的构造器声明抛出 IOException 异常           所以调用 test() 方法 的代码要么处于 try-catch 块中           要么处于另一个带 throws 声明抛出的方法中        */</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* 因为 test() 方法声明抛出 IOException 异常           所以调用该方法的代码要么处于 try-catch 块中           要么处于另一个带 throws 声明抛出的方法中        */</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="主动抛出异常-throw"><a href="#主动抛出异常-throw" class="headerlink" title="主动抛出异常 throw"></a>主动抛出异常 throw</h2><p>如果 throw 语句抛出的异常是 Checked 异常，则该 throw 语句要么处于 try 块里，显式捕获该异常，要么放在一个带 throws 声明抛出的方法中；如果 throw 语句抛出的是 Runtime 异常，则无需放在 try 块里，也无需放在带 throws 声明抛出的方法中，既可以显式的用 try-catch 来捕获并处理异常，也可以完全不理会该异常，把该异常交给该方法调用者处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowTest3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">throwChecked</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自行抛出 Exception 异常</span>            <span class="token comment" spellcheck="true">// 该代码必须处于 try 块里，或处于带 throws 声明的方法中</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"a的值大于0，不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">throwRuntime</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自行抛出 RuntimeException 异常</span>            <span class="token comment" spellcheck="true">// 既可以捕获该异常，也可以完全不理会该异常，把异常交给方法调用者处理</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"a的值大于0，不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用声明抛出 Checked 异常的方法，要么显式在 try-catch 中捕获该异常，要么在 main 方法中再次声明抛出</span>            <span class="token function">throwChecked</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用声明抛出 Runtime 异常的方法既可以显式捕获该异常，也可以不理会该异常</span>        <span class="token function">throwRuntime</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuctionException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 无参构造器</span>    <span class="token keyword">public</span> <span class="token function">AuctionException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 带一个字符串参数的构造器</span>    <span class="token keyword">public</span> <span class="token function">AuctionException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>将原始信息隐藏起来，仅向上提供必要的异常提示信息的处理方式，可以保证底层异常不会扩散到表现层，避免向上暴露太多的细节，符合面向对象的封装原则。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">calSal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SalException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现结算工资的业务逻辑</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> sqle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将原始异常记录下来，留给管理员</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 下面异常中的 message 就是给用户的提示</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SalException</span><span class="token punctuation">(</span>"访问数据库异常“<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将原始异常记录下来，留给管理员</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">// 下面异常中的 message 就是给用户的提示</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SalException</span><span class="token punctuation">(</span>"系统出现未知异常“<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-匿名内部类</title>
      <link href="/2020/04/02/java/ji-chu/ni-ming-nei-bu-lei/"/>
      <url>/2020/04/02/java/ji-chu/ni-ming-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<p>匿名内部类适合创建只需要一次使用的类，创建匿名内部类时会立即创建一个该类的实例，这个类定义立即消失，匿名类不能重复使用。</p><p>匿名类是用来创建接口或者抽象类的实例的。</p><p>匿名内部类不能定义构造器。因为匿名内部类没有类名，所有无法定义构造器。但匿名内部类可以定义初始化块，可以通过实例初始化块来完成构造器需要完成的事情。</p><p>定义匿名内部类格式如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> 实现接口 <span class="token operator">|</span> 抽象父类构造器<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>    匿名内部类的类体部分<span class="token punctuation">}</span></code></pre><p>最常用的创建匿名内部类的方式是需要创建某个接口类型的对象，如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>ProductA p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Buy a"</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Cost "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnonymousTest ta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用 test() 方法时，需要传入一个 Product 参数</span>        <span class="token comment" spellcheck="true">// 此处传入其匿名实现类的实例</span>        ta<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">567.8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"APG Card"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过继承抽象父类来创建匿名内部类时，匿名内部类将拥有和父类相同形参列表的构造器。看下面一段代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Device</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Device</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Device</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Device d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Buy a"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"Cost"</span> <span class="token operator">+</span> d<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnonymousInner ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用有参数的构造器创建 Device 匿名实现类的对象</span>        ai<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Device</span><span class="token punctuation">(</span><span class="token string">"电子显示器"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">67.8</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用无参数的构造器创建 Device 匿名实现类的对象</span>        Device d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Device</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化块</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类的初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 实现抽象方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">56.2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 重写父类的实例方法</span>            <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"keyboard"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ai<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-内部类</title>
      <link href="/2020/04/02/java/ji-chu/nei-bu-lei/"/>
      <url>/2020/04/02/java/ji-chu/nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cow</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Cow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Cow</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义一个非静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CowLeg</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>        <span class="token keyword">private</span> String color<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CowLeg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">CowLeg</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">,</span> String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前牛腿的颜色是 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">", 长 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 直接访问外部类的 private 修饰的成员变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"该牛腿所属的奶牛重: "</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CowLeg cl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CowLeg</span><span class="token punctuation">(</span><span class="token number">1.12</span><span class="token punctuation">,</span> <span class="token string">"黑白相间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cl<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cow cow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cow</span><span class="token punctuation">(</span><span class="token number">378.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cow<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在非静态内部类里可以直接访问外部类的 private 成员，这是因为在非静态内部类对象里，保存了一个它所寄生的外部类对象的引用。如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200402104437.png" alt></p><p>如果外部类成员变量、内部类成员变量与内部类里方法的局部变量名同名</p><ul><li><p>直接访问局部变量</p></li><li><p>this，访问内部类实例的变量</p></li><li><p>外部类类名.this.varName 访问外部类实例变量</p></li></ul><p>外部类不能直接访问非静态内部类的成员，无论非静态内部类的成员是什么修饰符修饰的。只能显示创建非静态内部类对象来访问其实例成员。</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>如果用 static 修饰一个内部类，则这个内部类就属于外部类本身，而不属于外部类的某个对象。因此也叫做类内部类。即静态内部类是外部类的一个静态成员。</p><p>静态内部类可以包含静态成员，也可以包含非静态成员。</p><p>静态内部类不能访问外部类的实例成员，只能访问外部类的类成员。</p><p>外部类依然不能直接访问静态内部类的成员，但可以使用静态内部类的类名作为调用者来访问静态内部类的类成员，也可以使用静态内部类对象作为调用者来访问静态内部类的实例成员。</p><hr><blockquote><p>在外部类以外的地方访问内部类（包括静态和非静态两种），则内部类不能使用 private 修饰，private 修饰的内部类只能在外部类内部使用。对于使用其他访问修饰符的内部类，按照访问修饰符范围访问。</p></blockquote><h2 id="在外部类之外使用非静态内部类"><a href="#在外部类之外使用非静态内部类" class="headerlink" title="在外部类之外使用非静态内部类"></a>在外部类之外使用非静态内部类</h2><p>由于非静态内部类的对象必须寄生在外部类的对象里，因此在创建非静态内部类对象之前，必须先创建其外部类对象。</p><p>示例代码，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Out</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用默认访问控制符，同一个包中的其他类可以访问该内部类</span>    <span class="token keyword">class</span> <span class="token class-name">In</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">In</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateInnerInstance</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Out<span class="token punctuation">.</span>In in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">In</span><span class="token punctuation">(</span><span class="token string">"Test Msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        上面代码可以改为如下三行代码        使用 OutterClass.InnerClass 的形式定义内部类变量        Out.In in;        创建外部类实例，非静态内部类实例将寄生在该实例中        Out out = new Out();        通过外部类实例和new来调用内部类构造器创建非静态内部类实例        in = out.new In("Test Msg");        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面定义了一个子类继承了 Out 类的非静态内部类 In 类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Out<span class="token punctuation">.</span>In</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 显示定义 SubClass 的构造器</span>    <span class="token keyword">public</span> <span class="token function">SubClass</span><span class="token punctuation">(</span>Out out<span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的代码可能看起来很怪，其实很正常：非静态内部类 In 类的构造器必须使用外部类对象来调用，代码中 super 代表调用 In 类的构造器，而 out 则代表外部类对象。</p><p>如果需要创建 SubClass 对象时，必须创建一个 Out 对象。因为 SubClass 是非静态内部类 In 的子类，非静态内部类 In 对象里必须有一个对 Out 对象的引用，其子类 SubClass 对象里也应该持有对 Out 对象的引用。当创建 SubClass 对象时传给该构造器的 Out 对象，就是 SubClass 对象里 Out 对应引用所指向的对象。</p><p>结合上面两段代码，非静态内部类 In 对象和 SubClass 对象都必须持有指向 Outer 对象的引用，区别是创建两种对象时传入 Out 对象的方式不同：当创建非静态内部类 In 类的对象时，必须通过 Outer 对象来调用 new 关键字；当创建 SubClass 类的对象时，必须使用 Outer 对象作为调用者来调用 In 类的构造器</p><h2 id="在外部类之外使用静态内部类"><a href="#在外部类之外使用静态内部类" class="headerlink" title="在外部类之外使用静态内部类"></a>在外部类之外使用静态内部类</h2><p>因为静态内部类是外部类类相关的，因此创建静态内部类对象时无需创建外部类对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateStaticInnerInstance</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StaticOut<span class="token punctuation">.</span>StaticIn in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticOut<span class="token punctuation">.</span>StaticIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 上面的代码可改为如下两行代码        使用 OuterClass.InnerClass 的形式定义内部类变量        StaticOut.StaticIn in;        通过 new 调用内部类构造器创建静态内部类实例        in = new StaticOut.StaticIn();        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为调用静态内部类的构造器时不需要使用外部类对象，所以创建静态内部类的子类也比较简单。下面代码为静态静态内部类 StaticIn 定义了一个空的子类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticSubClass</span> <span class="token keyword">extends</span> <span class="token class-name">StaticOut<span class="token punctuation">.</span>StaticIn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-抽象类</title>
      <link href="/2020/04/02/java/ji-chu/chou-xiang-lei/"/>
      <url>/2020/04/02/java/ji-chu/chou-xiang-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><p>抽象类是模板模式的设计模式体现。抽象类是从多个具体类中抽象出来的父类，具有更高层次的抽象。从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类为其子类的模板，避免子类设计的随意性</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>抽象类使用 abstract 修饰。</p></li><li><p>抽象类可以和普通类一样可以包含成员变量、方法、构造器、初始化块、内部类。但抽象类不能被实例化，抽象类的构造器主要用来被子类调用。</p></li><li><p>抽象类可以不包含抽象方法，但是含有抽象方法的类必须被定义为抽象类。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-接口</title>
      <link href="/2020/04/02/java/ji-chu/jie-kou/"/>
      <url>/2020/04/02/java/ji-chu/jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><ul><li><p>接口体现的是规范和实现分离的设计哲学，让软件系统的各组件之间面向接口耦合，是一种松耦合的设计。</p></li><li><p>接口定义的是多个类共同的公共行为规范，这些行为是与外部交流的通道，意味着接口通常是定义一组公共方法。</p></li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li><p>接口的修饰符，只能是 public 或者 default。</p></li><li><p>由于接口定义的是一种规范，所以接口里不能包含构造器和初始化块定义，只能包含静态常量、方法（只能是抽象方法，类方法和默认方法）以及内部类、内部接口、内部枚举。</p></li><li><p>接口里的常量只能是静态常量，默认使用 public static final 修饰。</p></li><li><p>接口里的内部类、内部接口、内部枚举，默认使用 public static 修饰。</p></li><li><p>接口里的抽象方法不能有方法体，但类方法和默认方法必须有方法体。</p></li></ul><h2 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h2><p>接口中定义抽象方法可以省略 abstract 关键字和修饰符，默认修饰符为 public。</p><p>Java 8 新增允许在接口中定义默认方法，使用 default 修饰。默认情况下，系统使用 public 修饰默认方法。</p><p>Java 8 新增允许在接口中定义私有方法。</p><p>Java 8 新增允许在接口中定义静态方法。静态方法可以被实现的接口的类继承。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一个类可以实现一个或多个接口。</p><p>一个类实现一个或多个接口，这个类必须重写所实现的接口中的所有抽象方法。否则，该类必须被定义成抽象类，保留从父接口继承到的抽象方法。</p><p>接口不能用来创建实例，但是可以用于声明引用类型的变量，该变量必须指向实现该接口的类的实例对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-Object 类</title>
      <link href="/2020/04/02/java/ji-chu/object-lei/"/>
      <url>/2020/04/02/java/ji-chu/object-lei/</url>
      
        <content type="html"><![CDATA[<p>Object 类是所有类的父类。</p><p>下面介绍几个 Object 类中常用的方法。</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>toString 用于输出对象的自我描述信息。</p><p>Object 类提供的 toString 返回该对象实现类的 “类名 + @ + hashCode”。</p><p>通常需要重写该方法。</p><h2 id><a href="#" class="headerlink" title="=="></a>==</h2><p>对于基本数据类型的变量，只要两个变量的值相等（不需要数据类型完全相同），就返回 true。</p><p>对于两个引用类型的变量，只有它们指向同一个对象时，== 判断才会返回 true。</p><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>对于引用变量，只有指向同一个对象时才返回 true。</p><p>当仅需要判断值相等时，一般需要重写 equals 方法。</p><p>重写 equals 方法的示例：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Person personObj <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>personObj<span class="token punctuation">.</span><span class="token function">getIdStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注意：如果equals 为 true，那么也需要重写 hashcode 方法，以保证 hashCode() 返回值相等，这是一种<strong>约定俗称</strong>的规范。即 equals 为 true 是 hashCode 相等的充分非必要条件。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>顺序 并行 并发</title>
      <link href="/2020/03/29/java/duo-xian-cheng/shun-xu-bing-xing-bing-fa/"/>
      <url>/2020/03/29/java/duo-xian-cheng/shun-xu-bing-xing-bing-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML 图示</title>
      <link href="/2020/03/26/java/ji-chu/uml-tu-shi/"/>
      <url>/2020/03/26/java/ji-chu/uml-tu-shi/</url>
      
        <content type="html"><![CDATA[<p>UML 是分析程序和理解程序间的调用关系时，不可多得的利器。</p><p>这里简单介绍几种程序开发中经常使用的 UML 视图，并辅以真实的 Java 案例。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>UML 中的类图表示用于表示类、接口、实例之间的静态关系。</p><h3 id="类的层次关系"><a href="#类的层次关系" class="headerlink" title="类的层次关系"></a>类的层次关系</h3><p>展示类的层次关系，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200326094046.png" alt></p><h3 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h3><p>展示接口与实现类的关系，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200326094335.png" alt></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>只要在一个类中持有另一个类的实例，无论是单个还是多个，这种持有关系就称之为聚合。</p><p>展示聚合关系，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200326094652.png" alt></p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>类的属性和方法的可见性（访问控制），如下图</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200326094839.png" alt></p><h3 id="类的关联"><a href="#类的关联" class="headerlink" title="类的关联"></a>类的关联</h3><p>类之间的关联关系，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200326095003.png" alt></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p>类图表示的静态关系不随时间流逝而变化，而时序图恰好相反，随着时间流逝而发生变化的关系。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/uml.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-继承</title>
      <link href="/2020/03/20/scala/ji-chu/ji-cheng/"/>
      <url>/2020/03/20/scala/ji-chu/ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Scala 只支持单继承，这点和 Java 一样。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> ExtendDemo <span class="token keyword">extends</span> App <span class="token punctuation">{</span>  <span class="token keyword">val</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> Stu  stu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"cris"</span>  stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>  stu<span class="token punctuation">.</span>study<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cris is studying!!!</span>  stu<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Student(cris,23)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Person <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">18</span>  <span class="token keyword">def</span> info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>toString<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> s<span class="token string">"Person($name, $age)"</span><span class="token punctuation">}</span><span class="token keyword">class</span> Stu <span class="token keyword">extends</span> Person <span class="token punctuation">{</span>  <span class="token keyword">def</span> study<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" is studying!!!"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> s<span class="token string">"Student($name,$age)"</span><span class="token punctuation">}</span></code></pre><p>注意：子类继承了父类所有的属性，只是私有的属性不能直接访问，需要通过公共的方法去访问。</p><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>Scala 中重写一个非抽象方法需要使用 override 修饰符。调用超类的方法使用 super 关键字。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323162033.png" alt></p><h2 id="类型检查和转换（多态）"><a href="#类型检查和转换（多态）" class="headerlink" title="类型检查和转换（多态）"></a>类型检查和转换（多态）</h2><p>classOf[String] 就如同 Java 的 String.class</p><p>obj.isInstanceOf[T] 就如同 Java 的 obj instanceof T 判断 obj 是不是 T 类型</p><p>obj.asInstanceOf[T] 就如同 Java 的 (T)obj 将 obj 强转成 T 类型</p><p>示例代码：</p><pre class=" language-scala"><code class="language-scala">  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>classOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// class java.lang.String</span>    <span class="token comment" spellcheck="true">// 使用反射实现</span>    <span class="token keyword">val</span> string <span class="token operator">=</span> <span class="token string">"cris"</span>    println<span class="token punctuation">(</span>string<span class="token punctuation">.</span>getClass<span class="token punctuation">.</span>getName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// java.lang.String</span>    <span class="token comment" spellcheck="true">// 类型判断</span>    println<span class="token punctuation">(</span>string<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token comment" spellcheck="true">// 类型转换（向上转型）</span>    <span class="token keyword">val</span> any<span class="token operator">:</span> <span class="token builtin">AnyRef</span> <span class="token operator">=</span> string    <span class="token comment" spellcheck="true">// 类型转换（向下转型）</span>    println<span class="token punctuation">(</span>any<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">.</span>charAt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// c</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>类型转换最佳示例：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> TypeConverse <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> Dog02    <span class="token keyword">val</span> fish <span class="token operator">=</span> <span class="token keyword">new</span> Fish02    func<span class="token punctuation">(</span>dog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// dog is eating bone</span>    func<span class="token punctuation">(</span>fish<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// fish is swimming</span>  <span class="token punctuation">}</span>  <span class="token keyword">def</span> func<span class="token punctuation">(</span>p<span class="token operator">:</span> Pet02<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span>Dog02<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Dog02<span class="token punctuation">]</span><span class="token punctuation">.</span>eatBone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span>Fish02<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Fish02<span class="token punctuation">]</span><span class="token punctuation">.</span>swimming<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> println<span class="token punctuation">(</span><span class="token string">"类型错误！"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Pet02 <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> Dog02 <span class="token keyword">extends</span> Pet02 <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"dog"</span>  <span class="token keyword">def</span> eatBone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>s<span class="token string">"$name is eating bone"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Fish02 <span class="token keyword">extends</span> Pet02 <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"fish"</span>  <span class="token keyword">def</span> swimming<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>s<span class="token string">"$name is swimming"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="超类构造"><a href="#超类构造" class="headerlink" title="超类构造"></a>超类构造</h2><p>在 Java 中，创建子类对象时，子类的构造器总是去调用一个父类的构造器（显式或者隐式调用）。</p><p>下面看看 scala 中的超类构造。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SuperDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> B<span class="token punctuation">(</span><span class="token string">"cris"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> A <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"A"</span>  println<span class="token punctuation">(</span>s<span class="token string">"A's name is $name"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> B <span class="token keyword">extends</span> A <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>s<span class="token string">"B's name is $name"</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    println<span class="token punctuation">(</span>s<span class="token string">"finally, B's name is $name"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323163019.png" alt></p><p>总结一下执行顺序：</p><ol><li>调用 B 的辅助构造函数时，先要调用 B 的主构造器。</li><li>调用 B 的主构造器之前，调用父类 A 的主构造器。</li><li>最后才是调用 B 的辅助构造。</li></ol><p>注意点：在 Scala 的构造器中，不能使用 super 来调用父类的构造器。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323163210.png" alt></p><p>注意点：在 Scala 中只有主构造器才可以直接调用父类的构造器（主构造器和辅助构造器），子类的辅助够造器无法直接调用父类的构造器。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SuperDemo2 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> Worker<span class="token punctuation">(</span><span class="token string">"cris"</span><span class="token punctuation">)</span>    worker<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> People<span class="token punctuation">(</span>pName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pName  <span class="token keyword">def</span> info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> println<span class="token punctuation">(</span>s<span class="token string">"name = $name"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在子类的主构造器中直接调用父类的主构造器</span><span class="token comment" spellcheck="true">// 通过将子类主构造器中的参数直接传递给父构造器</span><span class="token keyword">class</span> Worker<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> People<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>s<span class="token string">"age = $age"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-bash"><code class="language-bash">name <span class="token operator">=</span> crisage <span class="token operator">=</span> 20</code></pre><h2 id="属性重写"><a href="#属性重写" class="headerlink" title="属性重写"></a>属性重写</h2><p>回想：Java 中父类的属性可以被重写吗？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sub s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// james</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Super s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// cris</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"cris"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"james"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>答案是：不会！Java 给出的解释是：隐藏字段代替了重写。Java 中成员变量不能像方法一样被重写。当一个子类定义了一个跟父类相同名字的字段，子类就是定义了一个新的字段。这个字段在父类中被隐藏的，是不可重写的。</p><p>如果想要访问父类的隐藏字段：</p><ol><li>采用父类的引用类型，这样隐藏的字段就能被访问了，像上面所给出的例子一样。</li><li>将子类强制类型转化为父类类型，也能访问到隐藏的字段。</li></ol><p>再回顾下 Java 动态绑定：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Super s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s.getI() = "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s.sum() = "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s.sum1() = "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323172602.png" alt></p><p>如果我们将子类的 getI() 和 sum1() 方法注释掉，再执行，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323172626.png" alt></p><p>总结 Java 的动态绑定机制：</p><ul><li>当调用对象方法的时候，该方法会和该对象的内存地址绑定。</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，那里使用。</li></ul><p>Scala 的属性重写</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> OverrideDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> a<span class="token operator">:</span> AA <span class="token operator">=</span> <span class="token keyword">new</span> BB    <span class="token keyword">val</span> b<span class="token operator">:</span> BB <span class="token operator">=</span> <span class="token keyword">new</span> BB    println<span class="token punctuation">(</span>a<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实质调用的是 BB 的 i()方法</span>    println<span class="token punctuation">(</span>b<span class="token punctuation">.</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实质调用的是 BB 的 i()方法</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> AA <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// AA 编译后的文件会生成一个 i() 方法用于读取该属性</span>  <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token keyword">class</span> BB <span class="token keyword">extends</span> AA <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BB 编译后的文件会重写 AA 中的 i() 方法</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-bash"><code class="language-bash">2020</code></pre><p>看看编译后的源代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/WX20200323-172914.png" alt></p><p>注意点：val 属性只能重写另一个 val 属性或重写不带参数的同名方法。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> OverrideDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> a<span class="token operator">:</span> AA <span class="token operator">=</span> <span class="token keyword">new</span> BB    <span class="token keyword">val</span> b<span class="token operator">:</span> BB <span class="token operator">=</span> <span class="token keyword">new</span> BB    println<span class="token punctuation">(</span>a<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实质都是调用的 BB 中的 func()</span>    println<span class="token punctuation">(</span>b<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实质都是调用的 BB 中的 func()</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> AA <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// AA 编译后的文件会生成一个 i() 方法用于读取该属性</span>  <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">def</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token keyword">class</span> BB <span class="token keyword">extends</span> AA <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// BB 编译后的文件会重写 AA 中的 i() 方法</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment" spellcheck="true">// 看着很奇怪，从格式上像是定义了一个属性的重写，其实编译后的文件会生成 func() 方法，重写了 AA 中的 func() 方法。</span>  <span class="token keyword">override</span> <span class="token keyword">val</span> func<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> i<span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-bash"><code class="language-bash">2020</code></pre><p>查看编译后的字节码</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323173059.png" alt></p><p>小结：从编译后的字节码可以看出，val 修饰的属性会自动生成一个对应的 get 方法。重写该属性其实是重写对应的 get 方法。</p><p>注意点：var 只能重写另一个抽象的 var 属性。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323173132.png" alt></p><p>先看看什么是抽象属性：未初始化的变量就是抽象的属性，抽象属性需要定义在抽象类中。</p><p>然后再看看编译后的字节码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200323173206.png" alt></p><p>本质上是在子类中实现了父类中的抽象方法。因此 BBB 中的 override 关键字也可以省略。</p><p>重写抽象的 var 属性小结：</p><ul><li>一个 var 属性没有初始化，那么这个 var 属性就是抽象属性。</li><li>抽象的 var 属性在编译成字节码文件时，属性并不会声明，但是会自动生成抽象方法，所以类必须声明为抽象类。</li><li>如果是重写一个父类的抽象 var 属性，那么 override 关键字可省略。</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在 Scala 中，通过 abstract 关键字标记不能被实例化的类。方法不用标记 abstract，只要省掉方法体即可。抽象类可以拥有抽象字段，抽象字段就是没有初始值的字段。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/WX20200323-171053.png" alt></p><p>小结：</p><ul><li>抽象类不能被实例化。</li><li>抽象类不一定要包含 abstract 方法。</li><li>一旦类包含了抽象方法或者抽象属性,则这个类必须声明为 abstract。</li><li>抽象方法不能有主体，不允许使用 abstract 修饰。</li><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法和抽象属性，除非它自己也声明为  abstract 类。</li><li>抽象方法和抽象属性不能使用 private、final 来修饰，因为这些关键字都是和重写/实现相违背的。</li><li>子类重写抽象方法不需要 override ，写上也不会错。</li></ul><h2 id="匿名子类"><a href="#匿名子类" class="headerlink" title="匿名子类"></a>匿名子类</h2><p>回顾 Java 匿名子类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Man man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"厨师炒菜挣钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        厨师炒菜挣钱</span>        man<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 挣钱的方法     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Scala 匿名子类：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> SubDemo2 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> monkey <span class="token operator">=</span> <span class="token keyword">new</span> Monkey <span class="token punctuation">{</span>      <span class="token keyword">override</span> <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"金丝猴"</span>      <span class="token keyword">override</span> <span class="token keyword">def</span> eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"吃桃子"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    monkey<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>monkey<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> Monkey <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span>  <span class="token keyword">def</span> eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-封装</title>
      <link href="/2020/03/20/scala/ji-chu/feng-zhuang/"/>
      <url>/2020/03/20/scala/ji-chu/feng-zhuang/</url>
      
        <content type="html"><![CDATA[<p>提供 get 方法</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span>  setXxx<span class="token punctuation">(</span>参数名 <span class="token operator">:</span> 类型<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加入数据验证的业务逻辑</span>        属性 <span class="token operator">=</span> 参数名    <span class="token punctuation">}</span></code></pre><p>提供 set 方法</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">def</span> getXxx<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token operator">:</span> 返回类型<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> 属性    <span class="token punctuation">}</span></code></pre><p>看一个具体的例子：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> StuffDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> stuff <span class="token operator">=</span> <span class="token keyword">new</span> Stuff<span class="token punctuation">(</span>sex <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stuff<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Stuff(2000.0, 18, M)</span>    stuff<span class="token punctuation">.</span>setAge<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stuff<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Stuff(2000.0, 24, M)</span>    stuff<span class="token punctuation">.</span>setAge<span class="token punctuation">(</span><span class="token number">190</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>stuff<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Stuff(2000.0, 24, M)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**  * 可以在主构造器中定义属性的默认值，甚至是设置属性的访问权限，但是失去了对属性的控制（解决方式是可以在调用构造方法前对设置的属性进行验证）  *  * @param salary  * @param age  * @param sex  */</span><span class="token keyword">class</span> Stuff<span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">var</span> salary<span class="token operator">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">val</span> sex<span class="token operator">:</span> <span class="token builtin">Char</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">18</span>  <span class="token keyword">def</span> setAge<span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> s<span class="token string">"Stuff($salary, $age, $sex)"</span><span class="token punctuation">}</span></code></pre><p>注意事项：</p><p>Scala 中为了简化代码的开发，在类中声明属性时，自动提供对应的 setter、getter 方法。</p><p>如果属性声明省略访问权限（编译器会自动为其加上 public 访问权限），对应 setter/getter 方法的访问权限是 public。</p><p>如果属性访问权限声明为 private，对应 setter/getter 方法的访问权限是 private。</p><p>所以，如果仅仅只是对一个属性进行简单的 set 和 get，只需要声明该属性即可；访问属性直接使用 对象.属性 即可（实质上是调用编译器自动生成的 getter 方法）；设置属性直接使用 对象.属性=xxx 即可（实质上是调用编译器自动生成的 setter 方法）。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-包</title>
      <link href="/2020/03/19/scala/ji-chu/bao/"/>
      <url>/2020/03/19/scala/ji-chu/bao/</url>
      
        <content type="html"><![CDATA[<p>Scala 的包机制，在 Java 基础之上更加的灵活。</p><h2 id="包路径"><a href="#包路径" class="headerlink" title="包路径"></a>包路径</h2><p>Scala 中包名和源码所在的系统文件目录结构要可以不一致（Java 中强制要求一致），但是编译后的字节码文件路径和包路径会保持一致（编译器自动完成）。</p><p>系统目录结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200319180829.png" alt></p><p>此时如果我们修改 Bird1 的打包路径：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200319215153.png" alt></p><p>再看看源代码和字节码文件所在的路径，完全不同：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200319215227.png" alt></p><p>为了让大家看的更清晰，再付上一张图：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200319215302.png" alt></p><p>很明显，目录结构和包的引用路径不一致，目录结构中没有 package100 这个包。但是程序并没有问题。因为编译器会在文件系统上自动创建对应的包路径，这里就是会自动创建 package100 这个目录，以保证字节码文件路径和包名保持一致。</p><h2 id="包嵌套"><a href="#包嵌套" class="headerlink" title="包嵌套"></a>包嵌套</h2><p>包可以像嵌套类那样嵌套使用，即包中有包。这样的好处是，可以在同一个文件中，将 class、 object、trait 创建在不同的包中，非常灵活。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/WX20200320-071126@2x.png" alt></p><p>编译运行后查看字节码文件：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320071239.png" alt></p><p>也进一步印证了 Scala 中源文件和字节码文件路径可以不一致。</p><h2 id="包作用域"><a href="#包作用域" class="headerlink" title="包作用域"></a>包作用域</h2><p>一个大括号就是一个作用域。</p><p>作用域原则：可以直接向上访问。</p><p>在 Scala 中子包可以直接访问父包中的内容（Java 中子包使用父包的类必须使用 import）。在子包和父包类重名时，默认采用就近原则，如果希望指定使用某个类，则带上包名即可。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cris <span class="token punctuation">{</span>  <span class="token keyword">class</span> Apple <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">package</span> scala <span class="token punctuation">{</span>    <span class="token keyword">class</span> Apple <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">object</span> Boy <span class="token punctuation">{</span>      <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        1. Scala 中子包可以直接访问父包的内容；        2. 子包和父包的类重名，默认采取就近原则；        3. 可以带上类的路径名指定使用该类        */</span>        <span class="token keyword">val</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> Apple        <span class="token keyword">val</span> apple2 <span class="token operator">=</span> <span class="token keyword">new</span> com<span class="token punctuation">.</span>cris<span class="token punctuation">.</span>Apple        <span class="token comment" spellcheck="true">// class com.cris.scala.Apple，子包中的 Apple</span>        println<span class="token punctuation">(</span>apple<span class="token punctuation">.</span>getClass<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// class com.cris.Apple，父包中的 Apple</span>        println<span class="token punctuation">(</span>apple2<span class="token punctuation">.</span>getClass<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是，父包要访问子包的内容时，需要 import 对应的类。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cris <span class="token punctuation">{</span>  <span class="token keyword">import</span> com<span class="token punctuation">.</span>cris<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Apple  <span class="token keyword">object</span> Apple<span class="token punctuation">{</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 推荐只在使用的时候再引用，控制作用域</span>      <span class="token keyword">import</span> com<span class="token punctuation">.</span>cris<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>Apple      <span class="token keyword">val</span> apple <span class="token operator">=</span> <span class="token keyword">new</span> Apple<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// class com.cris.scala.Apple</span>      println<span class="token punctuation">(</span>apple<span class="token punctuation">.</span>getClass<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">package</span> scala <span class="token punctuation">{</span>    <span class="token keyword">class</span> Apple <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Scala 也支持在同一个文件中，声明多个并列的 package。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320072316.png" alt></p><h2 id="包对象"><a href="#包对象" class="headerlink" title="包对象"></a>包对象</h2><p>包可以包含class、object、trait，但不能包含函数或变量的定义。这是 Java 虚拟机的局限。为了弥补这一点不足，scala 提供了包对象的概念来解决这个问题。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">package</span> cc<span class="token punctuation">.</span>tianny <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// package object emp 表示创建一个包对象 emp, 它是 cc.tianny.emp 这个包对应的包对象</span>   <span class="token comment" spellcheck="true">// package object emp 会在 cc.tianny.emp 包下生成 package.class 和 package$.class</span>  <span class="token keyword">package</span> <span class="token keyword">object</span> emp <span class="token punctuation">{</span>    <span class="token keyword">def</span> eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> salary <span class="token operator">=</span> <span class="token number">1000.0</span>  <span class="token punctuation">}</span>  <span class="token keyword">package</span> emp <span class="token punctuation">{</span>    <span class="token keyword">object</span> test <span class="token punctuation">{</span>      <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        eat<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// eat＝》实质调用了 package$.class 中的 MODULE$.eat()</span>        println<span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实质调用了 package$.class 中的 MODULE$.salary()</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>包对象字节码路径：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/WX20200320-133519.png" alt></p><p>包对象字节码内容：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320133628.png" alt></p><p>小结：</p><ol><li>包对象的名字需要和包名一致。</li><li>每一个包都可以有一个包对象。</li><li>包对象的名字需要和子包一样。</li><li>在包对象中定义的变量和方法，便可以在对应的包中使用。</li></ol><h2 id="包的可见性"><a href="#包的可见性" class="headerlink" title="包的可见性"></a>包的可见性</h2><p>在 Scala 中，包的访问权限与 Java 中有较大的不同。</p><ol><li>当属性访问权限为默认时，从字节码上看属性被声明为 private，但因为提供了 xxx_$eq() 方法（类似setter）和 xxx() 方法（类似 getter），因此从使用效果看是任何地方都可以访问。</li><li>当方法访问权限为默认时，默认为 public 访问权限。</li><li>private 为私有权限，只在类的内部和伴生对象中可用。</li><li>protected 为受保护权限，只能子类访问，同包无法访问。</li><li>没有 public 关键字，即不能用 public 显式的修饰属性和方法。</li><li>提升属性的访问权限</li></ol><p>针对第三小点，看如下代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320135758.png" alt></p><p>针对第六小点，看如下代码：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320141410.png" alt></p><p>默认情况下，Person 类下的 name 属性是私有的，包中的其他类或对象无法访该属性。这时我们对该属性进行了提升，让 detail 包下的类或对象都可以访问该属性。当然，也可以继续提升，让 detail 上层的包也可以访问该属性。</p><h2 id="包的引用"><a href="#包的引用" class="headerlink" title="包的引用"></a>包的引用</h2><p>Scala 中，import 语句可以出现在任何地方，并不仅限于文件顶部，import 语句的作用一直延伸到包含该语句的块末尾。这种语法的好处是：在需要时在引入包，缩小 import 包的作用范围，提高效率。</p><p>示例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320141719.png" alt></p><p>如果不想要某个包中全部的类，而是其中的几个类，可以采用选取器大括号的方式。</p><p>示例如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320141947.png" alt></p><p>如果引入的多个包中含有相同的类，那么可以将不需要的类进行重命名进行区分。</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200320142324.png" alt></p><p>或者使用 <code>import java.util.{HashMap => _ }</code> 对冲突的包进行隐藏。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-构造器参数</title>
      <link href="/2020/03/19/scala/ji-chu/gou-zao-qi-can-shu/"/>
      <url>/2020/03/19/scala/ji-chu/gou-zao-qi-can-shu/</url>
      
        <content type="html"><![CDATA[<p>Scala 构造器参数支持三种方式，默认无修饰符、使用 val 关键字声明、使用 var 关键字声明。</p><h2 id="无修饰符"><a href="#无修饰符" class="headerlink" title="无修饰符"></a>无修饰符</h2><p>Scala 类的主构造器的形参未用任何修饰符修饰，那么这个参数是局部变量。</p><p>比较简单，就不给出具体代码了。</p><h2 id="使用-val-声明"><a href="#使用-val-声明" class="headerlink" title="使用 val 声明"></a>使用 val 声明</h2><p>如果主构造器参数使用 val 关键字声明，那么 Scala 会将参数作为类的私有的只读属性使用。</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// inName 就是 Person 的一个 private 只读属性</span><span class="token keyword">class</span> Person<span class="token punctuation">(</span><span class="token keyword">val</span> inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> inName<span class="token punctuation">}</span></code></pre><p>查看字节码，一目了然。这里 inName 参数被声明为 <code>private final</code>，且有对应的 setter 方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String inName<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">public</span> String <span class="token function">inName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Worker2</span><span class="token punctuation">(</span>String inName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> inName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> name_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用-var-声明"><a href="#使用-var-声明" class="headerlink" title="使用 var 声明"></a>使用 var 声明</h2><p>如果主构造器参数使用 var 关键字声明，那么 Scala 会将参数作为类的成员属性使用，可读写。</p><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// inName 是 Person 的一个 private 的可以读写属性</span><span class="token keyword">class</span> Person<span class="token punctuation">(</span><span class="token keyword">var</span> inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> inName<span class="token punctuation">}</span></code></pre><p>查看字节码，一目了然。这里 inName 参数被声明为 <code>private </code>，且有对应的 getter 和 setter 方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String inName<span class="token punctuation">;</span>  <span class="token keyword">public</span> String <span class="token function">inName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> inName_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inName <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token function">inName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> name_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String inName<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-构造器</title>
      <link href="/2020/03/19/scala/ji-chu/gou-zao-qi/"/>
      <url>/2020/03/19/scala/ji-chu/gou-zao-qi/</url>
      
        <content type="html"><![CDATA[<p>Scala 构造器包括两种：主构造器和辅助构造器。</p><h2 id="主构造器"><a href="#主构造器" class="headerlink" title="主构造器"></a>主构造器</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> Construct01 <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> Person<span class="token punctuation">(</span>inName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> inAge<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> inName    <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> inAge    <span class="token comment" spellcheck="true">// 重写 toString 方法，方便输出对象信息</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\t age"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>几点注意：</p><ol><li>主构造器的声明直接置于类名之后。</li><li>主构造器会执行类定义中的所有语句。</li><li>一个类如果没有显式定义主构造器则自动拥有一个无参的主构造器。</li><li>如果主构造器无参数，小括号可省略，构建对象时调用的构造方法的小括号也可省略。</li></ol><p>关于第二点，我们这里查看编译后的字节码文件，一目了然。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> name_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> age_$<span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">int</span> x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>BoxesRunTime<span class="token punctuation">.</span><span class="token function">boxToInteger</span><span class="token punctuation">(</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String inName<span class="token punctuation">,</span> <span class="token keyword">int</span> inAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> inName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> inAge<span class="token punctuation">;</span>      Predef$<span class="token punctuation">.</span>MODULE$<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对应源码中的 println("-----")</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了验证第二个观点，我在原有代码里有加了 <code>println("-----")</code>这条语句。在上面编译后的字节码中，可以清晰的看到 println 语句被加到了 Person 构造方法中。</p><h2 id="辅构造器"><a href="#辅构造器" class="headerlink" title="辅构造器"></a>辅构造器</h2><p>辅助构造器使用关键字 this。</p><p>多个辅助构造器通过不同参数列表进行区分，即构造器的重载。</p><p>辅助构造器可以是直接或者间接调用主构造器。也就是说每个辅助构造器都必须以一个对先前已定义的其他辅助构造器或主构造器的调用开始。</p><p>下面重新定义一个 Person 类：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">class</span> Person2 <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> _  <span class="token comment" spellcheck="true">// 辅助构造器</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name <span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 辅助构造器无论是直接或间接，最终都一定要调用主构造器，执行主构造器的逻辑。</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 直接调用主构造器，且需要放在第一行。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 辅助构造器</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name <span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 直接调用主构造器，这里省略了小括号。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>age <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"匿名"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 间接调用了主构造器，因为 def this(name : String) 该辅助构造器中调用了主构造器。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>为了方便理解，可以与 Java 中的父子类构造器来进行类比。</p><p>我们知道 Java 中，子类构造器必须调用父类构造器，目的是在初始化当前子类对象时，先保证父类的初始化。如果子类构造器没有显示调用父类构造器，那么编译器会默认加上 super() 且放在子类构造器语句中的第一行。</p><p>如果指定了构造函数间的调用，那么 this 必须在第一行，以保证在执行任何动作前，对象已经完成了初始化。</p><p>对于间接调用，构造函数只能被构造函数调用，因为对象只会初始化一次。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-类与对象</title>
      <link href="/2020/03/18/scala/ji-chu/lei-yu-dui-xiang/"/>
      <url>/2020/03/18/scala/ji-chu/lei-yu-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> BasicClass <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> Cat    cat<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Catty"</span>    cat<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>    cat<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"White"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Cat <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">var</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> _  <span class="token keyword">var</span> color<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> _<span class="token punctuation">}</span></code></pre><p>以 <code>var name: String = ""</code> 为例，分析一下深层次的原理。</p><p>当我们声明 name 该属性时，编译器会自动转化为 <code>private name</code>。</p><p>同时，也会自动生成两个 public 方法，这两个方法等价于 Java 中的 getter 和 setter 方法。</p><p>下面看一下对应的字节码 class 文件，便一目了然。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>  <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> String color<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// getter</span>  <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// setter</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> name_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> age_$<span class="token function">eq</span><span class="token punctuation">(</span><span class="token keyword">int</span> x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> color_$<span class="token function">eq</span><span class="token punctuation">(</span>String x$<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> x$<span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>类中声明属性必须同时进行初始化操作。</li><li>声明时属性的类型可以省略，使用类型自动推导。</li><li>在定义属性时，可以暂时不赋值，使用符号 _ (下划线)，让系统分配默认值</li></ul><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 使用类型推导</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">// 分配默认值</span><span class="token keyword">var</span> age <span class="token operator">=</span> _</code></pre><p>常用类型的默认值如下：</p><table><thead><tr><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>Byte、Short、Int、Long</td><td>0</td></tr><tr><td>Float、Double</td><td>0.0</td></tr><tr><td>String、引用类型</td><td>null</td></tr><tr><td>Boolean</td><td>false</td></tr></tbody></table><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>声明对象时，一般情况下可以省略对象类型。但在涉及多态的情况下，声明对象时必须指定对象的类型。</p><p><code>val | var 对象名 [:类型] = new 类型()</code></p><p>普通情况下：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> Cat <span class="token comment" spellcheck="true">// 等价。如果主构造器没有形参，可以省略小括号。</span></code></pre><p>涉及多态情况下，假设声明了两个类 Cat 和 Animal，Cat 是 Animal 的子类：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> Cat <span class="token comment" spellcheck="true">// 父类引用指向子类对象</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-异常</title>
      <link href="/2020/03/18/scala/ji-chu/yi-chang/"/>
      <url>/2020/03/18/scala/ji-chu/yi-chang/</url>
      
        <content type="html"><![CDATA[<h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> ScalaException <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ex<span class="token operator">:</span> ArithmeticException <span class="token keyword">=></span> <span class="token punctuation">{</span>        println<span class="token punctuation">(</span><span class="token string">"捕获到了除数为0的算数异常: "</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>       println<span class="token punctuation">(</span><span class="token string">"最终要执行的代码"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> throwException <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> testThrowException<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Nothing</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> ArithmeticException<span class="token punctuation">(</span><span class="token string">"算术异常"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> res <span class="token operator">=</span> testThrowException<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> ex<span class="token operator">:</span> ArithmeticException <span class="token keyword">=></span>        println<span class="token punctuation">(</span><span class="token string">"捕获到异常"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> ex<span class="token operator">:</span> Exception <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"异常"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> throwsException <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    testThrowsException<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@throws</span><span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>NumberFormatException<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等同于Java NumberFormatException.class</span>    <span class="token keyword">def</span> testThrowsException<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token string">"abc"</span><span class="token punctuation">.</span>toInt    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-惰性函数</title>
      <link href="/2020/03/18/scala/ji-chu/duo-xing-han-shu/"/>
      <url>/2020/03/18/scala/ji-chu/duo-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<p>在 Scala 中，使用 lazy 关键字来实现延迟执行。</p><p>如果使用了 lazy 定义某一个变量，则这个变量只有在被使用时才会执行初始化。</p><h2 id="常规调用"><a href="#常规调用" class="headerlink" title="常规调用"></a>常规调用</h2><p>不使用惰性加载，代码如下：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> LazyFun <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> sum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"sum 函数开始执行了"</span><span class="token punctuation">)</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>    <span class="token keyword">val</span> res <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sum</span> 函数开始执行了----------------------30</code></pre><h2 id="惰性加载"><a href="#惰性加载" class="headerlink" title="惰性加载"></a>惰性加载</h2><p>使用惰性加载，代码如下：</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> LazyFun <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> sum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      println<span class="token punctuation">(</span><span class="token string">"sum 函数开始执行了"</span><span class="token punctuation">)</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>    <span class="token keyword">lazy</span> <span class="token keyword">val</span> res <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"----------------------"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果为：</p><pre class=" language-bash"><code class="language-bash">----------------------<span class="token function">sum</span> 函数开始执行了30</code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-函数定义</title>
      <link href="/2020/03/18/scala/ji-chu/han-shu-ding-yi/"/>
      <url>/2020/03/18/scala/ji-chu/han-shu-ding-yi/</url>
      
        <content type="html"><![CDATA[<p>Scala 因为语法灵活性的原因，定义函数或者方法有多种方式。</p><h2 id="方式-1"><a href="#方式-1" class="headerlink" title="方式 1"></a>方式 1</h2><p>规范化写法，指明函数的返回值类型。</p><p>如果写了 return 关键字 ，那么就必须声明返回值类型。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> getSum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方式-2"><a href="#方式-2" class="headerlink" title="方式 2"></a>方式 2</h2><p>不写明返回值的类型，且不写 return，程序会自行推导。最后一行代码的执行结果为返回值。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> getSum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方式-3"><a href="#方式-3" class="headerlink" title="方式 3"></a>方式 3</h2><p>省略返回值类型和 = 号。表示没有返回值，无论函数内部有没有返回值，返回值都是 Unit。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> getSum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面等价于</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">def</span> getSum<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      n1 <span class="token operator">+</span> n2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方式-4"><a href="#方式-4" class="headerlink" title="方式 4"></a>方式 4</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>    <span class="token keyword">def</span> addInt2<span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> n1 <span class="token operator">+</span> n2  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方式-5"><a href="#方式-5" class="headerlink" title="方式 5"></a>方式 5</h2><p>Spark 编程中常用到。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> FunDef <span class="token punctuation">{</span>    <span class="token keyword">val</span> addInt3 <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> n1 <span class="token operator">+</span> n2  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-break &amp; continue</title>
      <link href="/2020/03/18/scala/ji-chu/break-continue/"/>
      <url>/2020/03/18/scala/ji-chu/break-continue/</url>
      
        <content type="html"><![CDATA[<p>Scala 推荐使用函数式的风格解决 break 和 continue 的功能，而不是像 Java 一样提供关键字功能。</p><h2 id="Break-实现"><a href="#Break-实现" class="headerlink" title="Break 实现"></a>Break 实现</h2><p>将整个循环的逻辑放在 breakable 方法中，在需要真正跳出循环的时候使用 break 方法，这样达到了跳出整个循环的目的。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span>_<span class="token keyword">object</span> BreakDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    breakable <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          break<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>          println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面输出结果为 1。</p><h2 id="Continue-实现"><a href="#Continue-实现" class="headerlink" title="Continue 实现"></a>Continue 实现</h2><p>将 breakable 放在循环内，这样可以实现结束本次循环的目的而不是结束整个循环。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">import</span> scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span>control<span class="token punctuation">.</span>Breaks<span class="token punctuation">.</span>_<span class="token keyword">object</span> ContinueDemo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      breakable <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          break        <span class="token punctuation">}</span>        println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面输出结果为 1 2 4。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-数据类型</title>
      <link href="/2020/03/17/scala/ji-chu/shu-ju-lei-xing/"/>
      <url>/2020/03/17/scala/ji-chu/shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>Scala 中数据类型都是对象，没有 Java 中的原生类型。</p><p>Scala 中数据类型主要分为两类，AnyVal 值类型和 AnyRef 引用类型。</p><h2 id="AnyVal"><a href="#AnyVal" class="headerlink" title="AnyVal"></a>AnyVal</h2><p>包括常见的 Byte、Short、Int、Long、Double、Float、Char、Boolen、String、Unit。</p><p>Unit，等同于 Java 中的 void 类型。</p><h2 id="AnyRef"><a href="#AnyRef" class="headerlink" title="AnyRef"></a>AnyRef</h2><p>所有引用类型的基类。</p><h2 id="特殊类"><a href="#特殊类" class="headerlink" title="特殊类"></a>特殊类</h2><ol><li>Any：所有类的超类</li><li>Null：所有 AnyRef 类型的子类</li><li>Nothing：所有类的子类</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317145428.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-变量</title>
      <link href="/2020/03/17/scala/ji-chu/bian-liang/"/>
      <url>/2020/03/17/scala/ji-chu/bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>val | var 变量名 [: 变量类型] = 变量值</code></p><p>Scala 规定，声明变量时必须进行初始化。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Scala 声明时变量名在前，变量类型在后。与 Java 相反。</p><p>声明变量时，变量类型可省略（编译器可自动推导）。</p><h2 id="关键字-val"><a href="#关键字-val" class="headerlink" title="关键字 val"></a>关键字 val</h2><p>val 不可修改。</p><p>本质：反编译后，变量会加上 final 修饰。</p><h2 id="关键字-var"><a href="#关键字-var" class="headerlink" title="关键字 var"></a>关键字 var</h2><p>可修改。</p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-控制结构</title>
      <link href="/2020/03/17/scala/ji-chu/kong-zhi-jie-gou/"/>
      <url>/2020/03/17/scala/ji-chu/kong-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>Scala 控制结构与 Java 类似，除了 For 循环结构比较特殊。</p><p>下面详细介绍 For 循环的常见使用方法。</p><h3 id="前后闭合"><a href="#前后闭合" class="headerlink" title="前后闭合"></a>前后闭合</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="前闭后开"><a href="#前闭后开" class="headerlink" title="前闭后开"></a>前闭后开</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> until <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="循环守卫"><a href="#循环守卫" class="headerlink" title="循环守卫"></a>循环守卫</h3><p>如果表达式为真，进入循环体，否则跳过，类似于 <strong>continue</strong>。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span> <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>等价于</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="引入变量"><a href="#引入变量" class="headerlink" title="引入变量"></a>引入变量</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>等价于</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">val</span> j <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> i  println<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>等价于</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    println<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="循环返回值"><a href="#循环返回值" class="headerlink" title="循环返回值"></a>循环返回值</h3><p>将遍历过程中处理的结果返回到一个新的 Vector 集合中。使用 yield 关键字。yield 后面也可跟代码块。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> res <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> to <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> i</code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门-IDEA 配置</title>
      <link href="/2020/03/17/scala/ji-chu/scala-idea-maven/"/>
      <url>/2020/03/17/scala/ji-chu/scala-idea-maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-IDEA-Maven-配置"><a href="#Scala-IDEA-Maven-配置" class="headerlink" title="Scala IDEA Maven 配置"></a>Scala IDEA Maven 配置</h2><ul><li>创建 Maven 项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317140311.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317140251.png" alt></p><ul><li>创建 scala 目录，右键并标记为 sources root</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317140349.png" alt></p><ul><li>右键项目名，添加 Add Framework，选择 Scala</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317140431.png" alt></p><ul><li>创建 Scala 文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317140506.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-多态</title>
      <link href="/2020/03/17/java/ji-chu/duo-tai/"/>
      <url>/2020/03/17/java/ji-chu/duo-tai/</url>
      
        <content type="html"><![CDATA[<p>Java 引用变量有两个类型。如果编译时类型和运行时类型不一致，就可能出现多态。</p><ul><li><p>编译时类型：由声明该变量时使用的类型决定</p></li><li><p>运行时类型：由实际运行时赋给该变量的对象决定</p></li></ul><h3 id="向上类型转换"><a href="#向上类型转换" class="headerlink" title="向上类型转换"></a>向上类型转换</h3><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> book <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的普通方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">BaseClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String book <span class="token operator">=</span> <span class="token string">"轻量级 Java EE"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的test方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的sub方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BaseClass ploymophicBc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ploymophicBc<span class="token punctuation">.</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        ploymophicBc<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ploymophicBc<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为 ploymophicBc 的编译时类型是 BaseClass</span>        <span class="token comment" spellcheck="true">// BaseClass 类没有提供 sub 方法，所以下面代码编译时会出错</span>        <span class="token comment" spellcheck="true">// ploymophicBc.sub();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的例子中，引用变量 ploymophicBc 比较特殊，它的编译时类型是 BaseClass，而运行时类型是 SubClass。</p><p>ploymophicBc.sub() 这行代码会在编译时报错，因为 ploymophicBc 编译时类型为 BaseClass，而 BaseClass 中没有定义 sub 方法，因此编译时无法通过。</p><p>但是注意，ploymophicBc.book 的值为 6， 而不是 ”轻量级 Java EE“。因为<strong>对象的实例变量不具备多态性</strong>，系统总是试图访问它编译时类型所定义的成员变量，而非运行时。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>子类其实是一种特殊的父类，因此 java 允许把父类的引用指向子类对象，这被称为向上转型（upcasting），向上转型由系统自动完成。</p><p>可以调用哪些方法，取决于引用类型（编译时）。</p><p>具体调用哪个方法，取决于引用指向的实例对象（运行时）。</p><h3 id="向下类型转换"><a href="#向下类型转换" class="headerlink" title="向下类型转换"></a>向下类型转换</h3><p>问题：引用变量在代码编译过程中，只能调用它编译时类型具备的方法，而不能调用它运行时类型具备的方法</p><p>解决：强制转换成运行时类型</p><p>方法：引用类型之间的转换只能在有继承关系的两个类型之间进行，否则编译出错。如果想把一个父类引用变量的编译时类型转换成子类类型，则这个引用变量的运行时类型得是子类类型，否则引发 ClassCastException 异常</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建子类对象</span>Dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向上类型转换(类型自动提升),不存在风险</span><span class="token comment" spellcheck="true">// 此时 animal 为 Dog 类型</span>Animal animal <span class="token operator">=</span> dog<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 风险演示：编译阶段不会报错，但是运行时会报错</span><span class="token comment" spellcheck="true">// 根据上面的语句，此时 animal 指向 Dog 类型对象，没有办法转化成 Cat 对象。</span>Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>animal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1.强转成功，编译时按 Cat 类型  2. 但运行时 Dog 类型，类型不匹配，直接报错</span></code></pre><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><p>为了解决强制类型转换，可能引发的 ClassCastException 异常，引入 instanceof 运算符。</p><p>instanceof 运算符的含义：用于判断左边的对象（运行时类型）是否是右边的类或者其子类、实现类的实例。如果是返回 true，否则返回 false。</p><p>在之前的代码中，强制类型转换前使用 instanceof 判断：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>anmial <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Cat cat <span class="token operator">=</span> <span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>animal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-方法传参</title>
      <link href="/2020/03/17/java/ji-chu/fang-fa-chuan-can/"/>
      <url>/2020/03/17/java/ji-chu/fang-fa-chuan-can/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无论是基本类型的值传递，还是引用类型的参数传递，在 Java 中方法总是采用<strong>按值调用</strong>。对于引用类型，传递的是其对应的内存空间地址。</p></blockquote><h3 id="基本类型的值传递"><a href="#基本类型的值传递" class="headerlink" title="基本类型的值传递"></a>基本类型的值传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimitiveTransferTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 方法里 a 的值为: "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b的值为: "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换结束后 a 的值为 "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" b的值为 "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**运行结果：swap 方法里 a 的值为: 9 b的值为: 6交换结束后 a 的值为 6 b的值为 9*/</span></code></pre><p>分析图：</p><p>main 方法中定义了a、b 变量存储示意图，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317093701.png" alt></p><p>main 方法中的变量作为参数值传入 swap() 方法存储示意图，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317093735.png" alt></p><p>swap 方法中 a、b 交换后的存储示意图，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/1.png" alt></p><p>java 程序总是从 main() 方法开始执行，main() 方法定义了 a、b 两个局部变量，两个变量在 main 栈区中。在 main() 方法中调用 swap() 方法时，main() 方法此时还未结束，因此系统为 main 方法和 swap 方法分配了两块栈区，用于保存 main 方法和 swap 方法的局部变量。main 方法中的 a、b 变量作为参数传入 swap 方法，实际上是在 swap 方法栈区中重新产生了两个变量 a、b，并将 main 方法栈区中 a、b 变量的值分别赋给 swap 方法栈区中的 a、b 参数（这就是初始化）。此时系统内存中有两个 a 变量、两个 b 变量，只是存在于不同的方法栈区中而已。</p><h3 id="引用类型的参数传递"><a href="#引用类型的参数传递" class="headerlink" title="引用类型的参数传递"></a>引用类型的参数传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReferenceTransferTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>DataWrap dw<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> dw<span class="token punctuation">.</span>a<span class="token punctuation">;</span>        dw<span class="token punctuation">.</span>a <span class="token operator">=</span> dw<span class="token punctuation">.</span>b<span class="token punctuation">;</span>        dw<span class="token punctuation">.</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"swap 方法里， a 成员变量的的值为: "</span> <span class="token operator">+</span> dw<span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token string">" b 成员变量的值为: "</span> <span class="token operator">+</span> dw<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataWrap dw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataWrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dw<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        dw<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>dw<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换结束后， a 成员变量的的值为: "</span> <span class="token operator">+</span> dw<span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token string">" b 成员变量的值为: "</span> <span class="token operator">+</span> dw<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**swap 方法里， a 成员变量的的值为: 9 b 成员变量的值为: 6交换结束后， a 成员变量的的值为: 9 b 成员变量的值为: 6*/</span></code></pre><p>你可能会疑问，dw 对象的成员变量 a、b的值也被替换了，这跟前面基本类型的传递完全不一样。这非常容易让人觉得，调用传入 swap 方法的就是 dw 对象本身，而不是它的复制品。其实传递的依然是 dw 的值。</p><p>分析图：</p><p>main 方法中创建 DataWrap 对象后的存储示意图，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317094351.png" alt></p><p>main 方法中 dw 传入 swap() 方法后的存储示意图，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200317094417.png" alt></p><p>系统一样赋值了 dw 的副本，只是关键在于 dw 只是一个引用变量，它存储的值只是一段内存地址，将该内存地址传递给 swap 栈区，此时 swap 栈区的 dw 和 main 栈区的 dw 的值也就是内存地址相同，该段内存地址指向堆内存中的  DataWrap 对象。对 swap 栈区的 dw 操作，也就是对 DataWrap 对象操作。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-数组</title>
      <link href="/2020/03/15/java/ji-chu/shu-zu/"/>
      <url>/2020/03/15/java/ji-chu/shu-zu/</url>
      
        <content type="html"><![CDATA[<p>数组是用来存储固定大小的同类型元素。一旦数组初始化完成，数组在内存中所占的空间将被固定下来，因此数组的长度不可以改变。即使某个数组的元素被清空，但是它所占的空间依然保留。</p><p>数组本身也是一种引用类型，既可以存储基本数据类型，也可以存储引用类型，只要存储的数组元素具有相同的类型即可。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>执行动态初始化时，系统会根据声明的数组类型自动为数组元素分配初始值。如果是引用类型，则数组元素的初始值为 null。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>显式指定每个元素的初始值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><p>foreach 遍历数组</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> score <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数组的本质"><a href="#数组的本质" class="headerlink" title="数组的本质"></a>数组的本质</h2><p>将数组看成两个部分，一个部分是数组引用，也就是在代码中定义的数组引用变量；另一部分是实际的数组对象，这部分是在堆内存中运行的，通常无法直接访问它，只能通过引用变量来访问。</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>二维数组本质上还是一维数组，只是其数组元素也是引用，数组元素里保存的引用指向一维数组。</p><pre class=" language-java"><code class="language-java">String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>代码示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200315143323.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-控制结构</title>
      <link href="/2020/03/15/java/ji-chu/kong-zhi-jie-gou/"/>
      <url>/2020/03/15/java/ji-chu/kong-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>   statement<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>   statement<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> value1<span class="token operator">:</span>        statement1<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> value2<span class="token operator">:</span>        statement2<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> valuen<span class="token operator">:</span>        statementn<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        默认执行的代码<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当 switch 后表达式的值和 case 语句后的值相同时，从该位置向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。</p><ul><li><p>case 后面的值可以是常量数值，也可以是一个常量表达式，但不能是变量或带有变量的表达式</p></li><li><p>可以把功能相同的 case 语句合并起来</p></li><li><p>default 块可以出现在任意位置，也可以省略</p></li></ul><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    statement<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    statement<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>循环变量初始化<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 循环变量变化<span class="token punctuation">)</span> <span class="token punctuation">{</span>    statement；<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java入门-数据类型</title>
      <link href="/2020/03/15/java/ji-chu/shu-ju-lei-xing/"/>
      <url>/2020/03/15/java/ji-chu/shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>基本数据类型变量存储的是数据本身</li><li>引用类型变量存储的是数据的空间地址</li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，系统将会进行自动类型转换（隐式转换），否则需要强制转换。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>强制类型转换可能存在溢出导致数据精度丢失的情况。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Java 没有内置的字符串类型，而是提供了一个标准类库 String。</p><p>特征：不可变字符串</p><p>优点：编译器可以让字符串共享（只有字符串常量是共享的，而 + 或 substring 等操作产生的结果并不是共享的）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS 读写流程</title>
      <link href="/2019/09/09/da-shu-ju/hdfs/hdfs-du-xie-liu-cheng/"/>
      <url>/2019/09/09/da-shu-ju/hdfs/hdfs-du-xie-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="HDFS-文件读取流程"><a href="#HDFS-文件读取流程" class="headerlink" title="HDFS 文件读取流程"></a>HDFS 文件读取流程</h2><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200314185440.png" alt></p><p>Client 端调用 DistributedFileSystem 对象的 open() 方法。</p><p>由 DistributedFileSystem 通过 RPC 向 NameNode 请求返回文件的 Block 块所在的 DataNode 的地址。（我们知道 HDFS 默认策略对某个 Block 会保存三份副本到不同的 DataNode，那么 NameNode 应该返回哪个 DataNode？答案是根据 DataNode 到 Client 端的距离。假设请求的 Block 块刚好就落在 Client 端所在机器上，即 Client 端本身也是 DataNode，那么毫无疑问 DataNode 将会返回 Client 端所在机器地址。这也验证了 Hadoop 的一个设计特性，移动计算而不是移动数据，极大了减小了带宽。）</p><p>Client 端调用 FSDataInputStream 对象的 read() 方法，通过 FSDataInputStream 向 DataNode 获取 Block 数据。之后数据流源源不断地从 DataNode 返回至 Client。当最后一个 Block 返回至 Client 端后， DFSInputStream 会关闭与 DataNode 连接。上述过程对 Client 端都是透明的，从 Client 来看，它只是在不停的读取数据流。</p><p>如果 DFSInputStream 在读取的过程中发生了错误，将会尝试与存有该 Block 副本且距离最近的 DataNode 通信。同时，它会记录下出问题的 DataNode，在之后的数据请求过程中不再与之通信。并报告给 NameNode。DFSInputStream 具备检查数据校验和的功能。</p><h2 id="HDFS-文件写入流程"><a href="#HDFS-文件写入流程" class="headerlink" title="HDFS 文件写入流程"></a>HDFS 文件写入流程</h2><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200314185557.png" alt></p><p>Client 写入文件时，调用 DistributedFileSystem 对象的 create() 方法。</p><p>DistributedFileSystem 通过 RPC 请求 NameNode 向其 NameSpace 写入文件元数据信息。NameNode 会做多种检查，如判断文件是否存在，是否有相应的写权限等等。如果检查通过，NameNode 会将文件元数据写入 NameSpace。DistributedFileSystem 将会返回 FSDataOutputStream 用于 Client 端直接向 DataNode 写入数据。</p><p>DFSOutputStream 将 Client 要写入的数据分割成 Packets。Packets 会被保存到 Data Queue 队列中，并由 DataStreamer 消费处理。DataStreamer 请求 NameNode 分配 DataNode 列表，将 Packets 写入到 DataNode 中。假设放置副本的默认策略是 3，那么 NameNode 将返回 3 个 DataNode，并串联起来组成一条 Pipeline。 DataStreamer 将 Packets 写入到第一个 DataNode1，DataNode1 存储完后直接转发至 DataNode2，DataNode2 存储完后再直接转发至 DataNode3。（注意，这里直接是 DataNode1 直接将 Packet 转发至 DataNode2。）</p><p>DFSOutputStream 为了防止出问题时数据的丢失，维持了一个等待 DataNode 成功写入的 ACK Queue。只有当 Packet 被成功写入 Pipeline 中的每个 DataNode 时，此 Packet 才会从 ACK Queue 中移除。</p><p>在 Pipeline 写入的过程中，如果某个 DataNode 出现问题，Pipeline 首先将会被关闭，随后在 ACK Queue 中的 Packets 会被添加到 Data Queue 的最前面，用来防止位于问题节点下游的 DataNode 写入时的数据丢失。出问题的 DataNode 会被从 Pipeline 中移除。NameNode 会重新分配一个健康的 DataNode 构成新的 Pipeline。</p><p>当 Client 端写完数据，调用 DFSOutputStream 对象的 close() 方法。该操作将会将所有剩余的 Packets 刷写到 DataNode Pipeline 并等待返回确认，之后向 NameNode 发送文件写入完成信号。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CM &amp; CDH 基本介绍</title>
      <link href="/2019/08/17/da-shu-ju/cdh/cm-cdh-ji-ben-jie-shao/"/>
      <url>/2019/08/17/da-shu-ju/cdh/cm-cdh-ji-ben-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-CDH"><a href="#什么是-CDH" class="headerlink" title="什么是 CDH"></a>什么是 CDH</h2><p>Hadoop 是开源项目，所以很多公司在这个基础上进行商业化，不收费的 Hadoop 主要有三个：</p><ul><li><p>Apache，最原始的版本，所有发行版均基于这个版本进行</p></li><li><p>Cloudear，全称 Cloudera’s Distribution Including Apache Hadoop，简称 CDH</p></li><li><p>Hortonworks，全称 Hortonworks Data Platform，简称 HDP</p></li></ul><h2 id="什么是-Cloudera-Manager"><a href="#什么是-Cloudera-Manager" class="headerlink" title="什么是 Cloudera Manager"></a>什么是 Cloudera Manager</h2><p>Cloudear Manager，简称 CM，用于管理 CDH 集群，其主要功能是对 CDH 集群进行监控，大大改善原生 Apache Hadoop 的安装、配置复杂度和需要使用第三方开源监控工具所带来的诸多问题，可进行节点安装、配置、诊断、集成并提供 web 界面。</p><h2 id="CM-架构"><a href="#CM-架构" class="headerlink" title="CM 架构"></a>CM 架构</h2><p><img src="https://cdn.jsdelivr.net/gh/Tianny/Pic/img/20200314185027.png" alt></p><p>基本组成：</p><ul><li><p>Server</p></li><li><p>Agent：安装在每个集群节点上，Server 下发的操作都由 Agent 来实现</p></li><li><p>Management Service：监控报警等功能</p></li><li><p>Database：存储各种服务配置信息和报警信息</p></li><li><p>Cloudera Repoistory：用来分发 Parcels 包的远程仓库</p></li><li><p>Clients</p></li></ul><p>Server 和 Agent 通信方式：默认情况下，Agent 每隔 15s 向 Server 发送心跳。但是当状态发生变化时，为了减少用户等待时间，会加快心跳频率。</p><h2 id="CM-术语"><a href="#CM-术语" class="headerlink" title="CM 术语"></a>CM 术语</h2><ul><li><p>host 主机</p></li><li><p>rack 机架</p></li><li><p>cluster 集群</p></li><li><p>service 服务，例如 HDFS、YARN 都是一个个服务</p></li><li><p>role 角色，例如 HDFS 的 NameNode 和 DataNode 都可以称为 HDFS 的 角色</p></li><li><p>role group 角色组，将角色划分为一组方便管理</p></li><li><p>host template 主机模板</p></li><li><p>parcel 包</p></li><li><p>static service pool 静态服务池</p></li><li><p>dynamic resource pool 动态资源池</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDH </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
